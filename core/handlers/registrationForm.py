from sqlite3 import IntegrityError
from aiogram.types import CallbackQuery, Message
from aiogram import Bot
from aiogram.enums.parse_mode import ParseMode
from aiogram.fsm.context import FSMContext
from core.database.requests import UserDAO
from core.utils.statesRegister import StepsRegister
from core.handlers.basic import get_menu
from datetime import datetime
from core.keyboards.inline import get_state_manager_but

import re


def valid_fullname(full_name: str):
    pattern = r"^[A-Za-z–ê-–Ø–∞-—è]+ [A-Za-z–ê-–Ø–∞-—è]+([ -][A-Za-z–ê-–Ø–∞-—è]+)?$"

    if re.match(pattern, full_name):
        return True
    return False


def validate_phone_number(phone_number):
    phone_number = phone_number.replace(" ", "")

    pattern = re.compile(r"^(8)\d{10}$")

    return bool(pattern.match(phone_number))


async def handler_user_reg_data(msg: Message, state: FSMContext):
    if msg.content_type != "text":
        return await msg.answer(
            f"–î–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
        )

    data = msg.text
    bold_data = f"<b>{data}</b>"
    state_name = (await state.get_state()).split(":")[1]

    if state_name == "GET_FULL_NAME":
        if not valid_fullname(data):
            return await msg.answer(text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ñ–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        await state.update_data(FULL_NAME=data)

    elif state_name == "GET_PHONE":
        if not validate_phone_number(data.strip()):
            return await msg.answer(
                text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
            )
        await state.update_data(GET_PHONE=data)

    await msg.answer(
        f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ {bold_data} ‚úâÔ∏è\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ"
        ' "–≤—Å–µ –≤–µ—Ä–Ω–æ ‚úÖ", –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ø–æ–≤—Ç–æ—Ä–∏—Ç—å üîÉ"',
        reply_markup=get_state_manager_but(),
        parse_mode=ParseMode.HTML,
    )


async def handler_back_but(call: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    state_name = (await state.get_state()).split(":")[1]
    msg = call.message
    if state_name == "GET_FULL_NAME":
        await msg.answer(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ä–∞–∑ –≤–∞—à–µ –§–ò–û üîÉ")
    elif state_name == "GET_PHONE":
        await msg.answer(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ä–∞–∑ –≤–∞—à –Ω–æ–º–µ—Ä üîÉ")


async def handler_accept_but(call: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    state_name = (await state.get_state()).split(":")[1]
    msg = call.message

    if state_name == "GET_FULL_NAME":
        await state.set_state(StepsRegister.GET_PHONE)
        await msg.answer(
            "–§–ò–û –ø—Ä–∏–Ω—è—Ç–æ ‚úÖ\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ üîö\n"
            '–§–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ "8 —Ö—Ö—Ö —Ö—Ö—Ö —Ö—Ö —Ö—Ö"'
        )

    elif state_name == "GET_PHONE":
        user_state_data = await state.get_data()
        fullname = user_state_data["FULL_NAME"]

        first_name, last_name, middle_name = fullname.split()

        number = user_state_data["GET_PHONE"]
        chat_id = call.from_user.id
        registration_date = datetime.now()
        try:
            await UserDAO.update_by_id(
                model_id=chat_id,
                first_name=first_name,
                last_name=last_name,
                middle_name=middle_name,
                phone_number=number,
                date_registration=registration_date,
            )

        except Exception:
            return await msg.answer(
                text="–¢–∞–∫–æ–π –Ω–æ–º–µ—Ä —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
            )

        await msg.answer(text="–ù–æ–º–µ—Ä –ø—Ä–∏–Ω—è—Ç ‚úÖ.\n–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ üéâ")
        await state.clear()


async def registration_but_handler(call: CallbackQuery, bot: Bot, state: FSMContext):
    msg_id = call.message.message_id
    chat_id = call.message.chat.id
    await bot.delete_message(chat_id, msg_id)
    await state.set_state(StepsRegister.GET_FULL_NAME)
    await call.message.answer(
        text="‚ùóÔ∏è–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è‚ùóÔ∏è\n‚úâÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –§–ò–û –æ–¥–Ω–∏–º —Å–º—Å\n"
        '–§–æ—Ä–º–∞—Ç —Ñ–∏–æ - "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"'
    )
